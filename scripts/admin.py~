#!/usr/bin/env python

import webapp2
import jinja2
import os
from datetime import date

from objects.usermeta import UserMeta
from objects.player import Player
from objects.player import PlayerGame
from objects.team import Team
import utilities
from utilities import *
from google.appengine.api import users
from google.appengine.ext import db
from scores import *

jinja_environment = jinja2.Environment(loader=jinja2.FileSystemLoader(os.path.dirname(__file__)))

def check_admin(request):
  user=get_meta()
  if not user.admin:
    request.redirect('/')
    
def toggle_lockout(request):
  check_admin(request)
  utilities.toggle_lockout()
  return webapp2.redirect('/admin')

class MenuHandler(webapp2.RequestHandler):
  def get(self):
    check_admin(self)
    template_values={'lockout':lockout()}
    games=Game.all().order('round').run()
    template_values['games']=games
    template=jinja_environment.get_template('templates/admin_menu.html')
    self.response.out.write(template.render(template_values))   

class EditGameHandler(webapp2.RequestHandler):
  players={}
  def find_or_create(self,p_id,game):
    player=Player.get_by_id(int(p_id))
    pg=None
    try:
      pg=self.players[p_id]
    except:
      pg=PlayerGame(player=player,game=game)
      self.players[p_id]=pg
    return pg
  
  def get(self,game_id):
    check_admin(self)
    game=Game.get_by_id(int(game_id))
    players=Player.all().filter('active =',True).order('surname').fetch(1000)
    fielders=PlayerGame.all().filter('game =',game).fetch(1000)
    batting_order=sorted(fielders,key=lambda p: p.batting_position)
    bowling_order=sorted(fielders,key=lambda p: p.bowling_position)
    template_values={'game':game,'players':players,'dismissal_types':dismissal_types,'batting_order':batting_order,'bowling_order':bowling_order,
      'fielders':fielders}
    template=jinja_environment.get_template('templates/edit_game.html')
    self.response.out.write(template.render(template_values))
    
  def post(self):
    check_admin(self)
    game=Game.get_by_id(int(self.request.get('game')))
    batsmen=[]
    bowlers=[]
    fielders=[]
        
    # Check Duplicates
    for i in range(1,13):
      if self.request.get('batsman-'+str(i)+'-batted'):
        batsmen.append(self.request.get('batsman-'+str(i)))
      if self.request.get('bowler-'+str(i)+'-bowled'):
        bowlers.append(self.request.get('bowlers-'+str(i)))
      if self.request.get('fielder-'+str(i)) != '0':
        fielders.append(self.request.get('fielders-'+str(i)))
    
    if len(set(batsmen)) != len(batsmen):
      self.response.out.write("Error. Duplicate batsmen")
      return
    if len(set(bowlers)) != len(bowlers):
      self.response.out.write("Error. Duplicate bowlers")
    if len(set(fielders)) != len(fielders):
      self.response.out.write("Error. Duplicate fielders")
    
    # batting
    for i in range(1,12):
      si='batsman-'+str(i)
      if not self.request.get(si+'-batted') or self.request.get(si) == '0':
        continue
      p_id=self.request.get(si)
      pg=self.find_or_create(p_id,game)
      pg.batted=True
      if self.request.get(si+'-not_out'):
        pg.not_out=True
      else:
        pg.not_out=False
      pg.runs=int(self.request.get(si+'-runs'))
      pg.balls_faced=int(self.request.get(si+'-balls'))
      pg.fours_hit=int(self.request.get(si+'-fours'))
      pg.sixes_hit=int(self.request.get(si+'-sixes'))
      if not pg.not_out:
        pg.how_out=db.Category(self.request.get(si+'-how_out').replace('-',' '))
      else:
        pg.how_out=None
      pg.batting_position=i
    
    # bowling
    total_conceded=0
    for i in range(1,12):
      si='bowler-'+str(i)
      if not self.request.get(si+'-bowled') or self.request.get(si) == '0':
        continue
      p_id=self.request.get(si)
      pg=self.find_or_create(p_id,game)
      pg.bowled=True
      overs_tokens=self.request.get(si+'-overs').split('.')
      pg.overs=int(overs_tokens[0])
      pg.balls=int(overs_tokens[1])
      pg.maidens=int(self.request.get(si+'-maidens'))
      pg.runs_conceded=int(self.request.get(si+'-runs'))
      total_conceded+=pg.runs_conceded
      pg.wickets=int(self.request.get(si+'-wickets'))
      pg.wides=int(self.request.get(si+'-wides'))
      pg.no_balls=int(self.request.get(si+'-no_balls'))
      pg.fours=int(self.request.get(si+'-fours'))
      pg.sixes=int(self.request.get(si+'-sixes'))
      pg.bowling_position=i
    
    # fielding
    for i in range(1,13):
      si='fielder-'+str(i)
      if self.request.get(si)=='0':
        continue
      p_id=self.request.get(si)
      pg=self.find_or_create(p_id,game)
      pg.catches=int(self.request.get(si+'-catches'))
      pg.drops=int(self.request.get(si+'-drops'))
      pg.diving_drops=int(self.request.get(si+'-diving'))
      pg.non_attempts=int(self.request.get(si+'-non_attempts'))
      pg.run_outs=int(self.request.get(si+'-run_outs'))
      pg.misfields=int(self.request.get(si+'-misfields'))
      pg.other=int(self.request.get(si+'-other'))
      
    # TODO: Validation
    for pg in game.playergame_set:
      pg.delete()
    
    bat_total=0
    bowl_total=0
    bat_scores={}
    bowl_scores={}
    for key,pg in self.players.iteritems():
      bowl_scores[key]=bowling_score(pg,total_conceded)
      bowl_total+=bowl_scores[key]
      bat_scores[key]=batting_score(pg)
      bat_total+=bat_scores[key]
      pg.fielding_points=fielding_score(pg)
  
    bat_factor = 1
    bowl_factor = 1
    if bat_total > 0:    
      bat_factor = 100.0/bat_total
    if bowl_total > 0:
      bowl_factor = 100.0/bowl_total
    for key,pg in self.players.iteritems():
      pg.batting_points=int(bat_scores[key]*bat_factor)
      pg.bowling_points=int(bowl_scores[key]*bowl_factor)
      pg.put()
      
    completed=self.request.get('completed')
    if completed:
      game.played=True
      game_completed(game)
      for key,pg in self.players.iteritems():
        p=pg.player
        update_prices(p)
        p.put()
    else:
      game.played=False
    game.opposition=self.request.get('opposition')
    game.score=self.request.get('dedication-score')
    game.opposition_score=self.request.get('opposition-score')
    game.result=self.request.get('result')
    game.put()
    
    self.redirect('/admin')   

class InitHandler(webapp2.RequestHandler):
  def get(self):
    check_admin(self)
    games=Game.all().run()
    for g in games:
      g.delete()
    days=[26,27,28,28,29,30]
    for i in range(1,6):
      g=Game(round=i,date=date)
      g.put()
    us=Utilities.all().run()
    for u in us:
      u.delete()
    u=Utilities()
    u.current_round=1
    u.next_game=Game.all().filter('round =',1).get()
    u.put()
    teams=Team.all().run()
    for t in teams:
      t.delete()
    games=PlayerGame.all().run()
    for g in games:
      g.delete()
    self.response.out.write('done')

app = webapp2.WSGIApplication([('/admin',MenuHandler),
                               ('/admin/init',InitHandler),
                               ('/admin/toggle_lockout',toggle_lockout),
                               ('/admin/game',EditGameHandler),
                               webapp2.Route('/admin/game/<game_id>',handler=EditGameHandler)],debug=True)
