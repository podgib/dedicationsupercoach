from google.appengine.ext import db

from game import Game
from usermeta import UserMeta
from player import Player, PlayerGame

class Team(db.Model):
  user=db.ReferenceProperty(UserMeta,required=True)
  game=db.ReferenceProperty(Game,required=True)
  batting_score=db.IntegerProperty(default=0)
  bowling_score=db.IntegerProperty(default=0)
  fielding_score=db.IntegerProperty(default=0)
  
  batsmen=db.ListProperty(db.Key,default=[])
  bowlers=db.ListProperty(db.Key,default=[])
  fielders=db.ListProperty(db.Key,default=[])

  def copy_to_next_round(self):
    game=Game.all().filter('round =',self.game.round+1).get()
    t=Team(user=self.user,batsmen=self.batsmen,bowlers=self.bowlers,fielders=self.fielders,game=game)
    t.put()

  def calculate_scores(self):
    prior_score=self.user.total_points-self.batting_score-self.bowling_score-self.fielding_score
    batting_score=0
    bowling_score=0
    fielding_score=0

    for b in self.batsmen:
      bg=PlayerGame.all().filter("player =",b).filter("game =",self.game).get()
      batting_score += bg.batting_points
    for b in self.bowlers:
      bowling_score += db.get(b).bowling_score
    for f in self.fielders:
      fielding_score += db.get(f).fielding_score
    self.batting_score = batting_score
    self.bowling_score = bowling_score
    self.fielding_score = fielding_score
    self.user.total_points = prior_score + batting_score + bowling_score + fielding_score
    self.user.put()
    self.put()
    
  
  def drop_player(self,player,type):
    list=[]
    if type == 'batsman':
      list=self.batsmen
    elif type == 'bowler':
      list=self.bowlers
    elif type == 'fielder':
      list=self.fielders
    if player.key() in list:
      list.remove(player.key())
      return True
    else:
      return False
      
  def pick_player(self,player,type):
    if type == 'batsman':
      list=self.batsmen
    elif type == 'bowler':
      list=self.bowlers
    elif type == 'fielder':
      list=self.fielders
    if player.key() in list:
      return False
    else:
      list.append(player.key())
      return True
    
def finish_round(game,next_game):
  next_teams=Team.all().filter('game =',next_game).get()
  teams=Team.all().filter('game =',game).run()
  for team in teams:
    team.calculate_scores()
    if not next_teams:
      team.copy_to_next_round()

