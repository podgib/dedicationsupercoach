from google.appengine.ext import db
from google.appengine.api import users
from objects.game import Game
from objects.player import Player
from objects import team

dismissal_types=["Bowled","Caught","Run out","LBW","Stumped","Timed Out","Handling the ball"]

class Utilities(db.Model):
  current_round=db.IntegerProperty(default=1)
  final_game=db.IntegerProperty(default=1)
  next_game=db.ReferenceProperty(Game)
  lockout=db.BooleanProperty(default=False)
  
def lockout():
  utilities=Utilities.all().get()
  return utilities.lockout
  
def toggle_lockout():
  utilities=Utilities.all().get()
  utilities.lockout = not utilities.lockout
  utilities.put()
  
def current_round():
  utilities=Utilities.all().get()
  return utilities.current_round
  
def get_meta(user=None):
  if not user:
    user=users.get_current_user()
  return db.GqlQuery("SELECT * FROM UserMeta WHERE user = :1",user).get()
  
def next_game():
  utilities=Utilities.all().get()
  return utilities.next_game
  
def game_completed(game):
  utilities=Utilities.all().get()
  next_game=Game.all().filter('round =',utilities.next_game.round+1).get()
  finish_round(game,next_game)
  if game.key() == utilities.next_game.key():
    utilities.next_game=next_game
    if utilities.next_game:
      utilities.current_round=utilities.next_game.round
    utilities.lockout=False
    utilities.put()
  
def get_team(user_meta=None,game=None):
  if not user_meta:
    user_meta=get_meta()
  if not game:
    game=next_game()
  return db.GqlQuery("SELECT * FROM Team WHERE user = :1 AND game = :2",user_meta,game).get()
  
def selected_available(selected_keys,active_only=True):
  selected=[]
  available=[]
  all_players=set(Player.all(keys_only=True).filter('active =',active_only).fetch(1000))
  #selected_keys=set(selected_keys)
  available_keys=all_players.difference(selected_keys)
  for key in selected_keys:
    selected.append(db.get(key))
  for key in available_keys:
    available.append(db.get(key))
  return (selected,available)
  
